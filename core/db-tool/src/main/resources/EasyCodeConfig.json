{
  "author" : "sunzh",
  "version" : "1.2.7",
  "userSecure" : "",
  "currTypeMapperGroupName" : "Default",
  "currTemplateGroupName" : "sunny",
  "currColumnConfigGroupName" : "Default",
  "currGlobalConfigGroupName" : "Default",
  "typeMapper" : {
    "Default" : {
      "name" : "Default",
      "elementList" : [ {
        "matchType" : "REGEX",
        "columnType" : "varchar(\\(\\d+\\))?",
        "javaType" : "java.lang.String"
      }, {
        "matchType" : "REGEX",
        "columnType" : "char(\\(\\d+\\))?",
        "javaType" : "java.lang.String"
      }, {
        "matchType" : "REGEX",
        "columnType" : "(tiny|medium|long)*text",
        "javaType" : "java.lang.String"
      }, {
        "matchType" : "REGEX",
        "columnType" : "decimal(\\(\\d+,\\d+\\))?",
        "javaType" : "java.math.BigDecimal"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "integer",
        "javaType" : "java.lang.Integer"
      }, {
        "matchType" : "REGEX",
        "columnType" : "(tiny|small|medium)*int(\\(\\d+\\))?",
        "javaType" : "java.lang.Integer"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "int4",
        "javaType" : "java.lang.Integer"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "int8",
        "javaType" : "java.lang.Long"
      }, {
        "matchType" : "REGEX",
        "columnType" : "bigint(\\(\\d+\\))?",
        "javaType" : "java.lang.Long"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "date",
        "javaType" : "java.time.LocalDate"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "datetime",
        "javaType" : "java.time.LocalDateTime"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "timestamp",
        "javaType" : "java.util.Date"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "time",
        "javaType" : "java.time.LocalTime"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "boolean",
        "javaType" : "java.lang.Boolean"
      } ]
    }
  },
  "template" : {
    "sunny" : {
      "name" : "sunny",
      "elementList" : [ {
        "name" : "codeexception.vm",
        "code" : "#if($tableInfo.obj.name.startsWith(\"gj_\"))    \n$!tableInfo.setName($tool.getClassName($tableInfo.obj.name.substring(3)))\n#end\n##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"CodeExceptionEnum\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/exception\"))\n\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}exception;\n\n\nimport com.baomidou.mybatisplus.annotation.EnumValue;\nimport com.fasterxml.jackson.annotation.JsonCreator;\nimport com.sunny.boot.base.enums.IEnum;\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表业务异常枚举\n *\n * @author $!author\n * @since $!time.currTime()\n */\n\npublic enum $tableName implements IEnum<Integer> {\n    /**\n    * 不同模块异常 编号 从3100开始分配\n    */\n    $!{tableInfo.name}3100(3100, \"业务未知异常\");\n    @EnumValue\n    Integer code;\n    String name;\n\n    $tableName (int code, String name) {\n    this.code = code;\n    this.name = name;\n    }\n\n    /**\n    * 根据code取枚举对象\n    *\n    * @param code\n    * @return\n    */\n    @JsonCreator\n    public static $tableName  getByCode(Integer code) {\n    return IEnum.getEnumByCode(code, $tableName .values());\n    }\n\n    @Override\n    public String getName() {\n    return this.name();\n    }\n\n    @Override\n    public Integer getValue() {\n    return code;\n    }\n\n}\n\n "
      }, {
        "name" : "controller.vm",
        "code" : "#if($tableInfo.obj.name.startsWith(\"gj_\"))    \n$!tableInfo.setName($tool.getClassName($tableInfo.obj.name.substring(3)))\n#end\n##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Controller\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/controller\"))\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}controller;\n\nimport $!{tableInfo.savePackageName}.persistent.entity.$!{tableInfo.name}DO;\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\n\nimport cn.hutool.core.bean.BeanUtil;\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport com.sunny.boot.base.controller.dto.PageResponseDTO;\nimport com.sunny.boot.base.controller.dto.ResponseDTO;\nimport $!{tableInfo.savePackageName}.controller.dto.$!{tableInfo.name}ReqDTO;\nimport $!{tableInfo.savePackageName}.controller.dto.$!{tableInfo.name}RspDTO;\nimport $!{tableInfo.savePackageName}.controller.dto.Page$!{tableInfo.name}ReqDTO; \nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiOperation;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.*;\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport com.sunny.boot.base.exception.code.ResultEnum;\nimport com.sunny.boot.base.enums.ValidateGroupEnum;\nimport java.io.Serializable;\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表控制层\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@RestController\n@RequestMapping(\"/gj/$!tool.firstLowerCase($tableInfo.name)\")\n@RequiredArgsConstructor(onConstructor = @__(@Autowired))\n@Api(tags = \"$!{tableInfo.comment}模块接口\")\npublic class $!{tableName} { \n     /**\n     * 服务对象\n     */ \n    private final  $!{tableInfo.name}Service $!tool.firstLowerCase($tableInfo.name)Service;\n     /**\n     * 分页查询\n     * \n     * @param req      分页对象\n     * @return 查询结果\n     */\n    @ApiOperation(value = \"分页查询列表\")\n    @PostMapping(\"/page\")\n    public PageResponseDTO<$!{tableInfo.name}RspDTO> page(@Validated({ValidateGroupEnum.PageGroup.class})  @RequestBody Page$!{tableInfo.name}ReqDTO req) {\n \n        IPage<$!{tableInfo.name}DO> result=this.$!{tool.firstLowerCase($tableInfo.name)}Service.page(BeanUtil.copyProperties(req.getQueryParam(), $!{tableInfo.name}DO.class)\n                ,req.getPageSize(),req.getPageNum());\n        return PageResponseDTO.<$!{tableInfo.name}RspDTO>builder().\n                count(result.getTotal()).data(\n                        result.getRecords().stream().map(v->$!{tableInfo.name}RspDTO.builder()\n                                        //TODO 控制层进行对像转换\n                                        .name(v.getName())\n                                        .build())\n                                .collect(Collectors.toList())\n                ).code(ResultEnum.SUCCESS.getCode()).desc(ResultEnum.SUCCESS.getMessage()).build();\n    }\n  \n \n    /**\n     * 通过主键查询单条数据\n     *\n     * @param id 主键\n     * @return 单条数据\n     */\n    @ApiOperation(value = \"根据主键加载数据\")\n    @GetMapping(\"/load/{id}\")\n    public ResponseDTO<$!{tableInfo.name}RspDTO> load(@PathVariable(value = \"id\") Long id){\n        $!{tableInfo.name}DO $!{tableInfo.name}DO=  this.$!{tool.firstLowerCase($tableInfo.name)}Service.load(id);\n\n        return ResponseDTO.succeed($!{tableInfo.name}RspDTO.builder()\n                //TODO 控制层进行对像转换\n                .name($!{tableInfo.name}DO.getName())\n                .build());\n\n    }\n\n    @ApiOperation(value = \"更新数据\")\n    @PostMapping(\"/update\")\n    public ResponseDTO update(@Validated({ValidateGroupEnum.UpdateGroup.class}) @RequestBody $!{tableInfo.name}ReqDTO req){\n\n        this.$!{tool.firstLowerCase($tableInfo.name)}Service.update(BeanUtil.copyProperties(req, $!{tableInfo.name}DO.class));\n        return ResponseDTO.succeed();\n    }\n    @ApiOperation(value = \"逻辑删除数据\")\n    @GetMapping(\"/remove/{id}\")\n    public ResponseDTO remove(@PathVariable(value = \"id\") Long id){\n        this.$!{tool.firstLowerCase($tableInfo.name)}Service.remove(id);\n        return ResponseDTO.succeed();\n    }\n    @ApiOperation(value = \"根据条件查询数据\")\n    @PostMapping(\"/list\")\n    public ResponseDTO<List<$!{tableInfo.name}RspDTO>> list(@Validated({ValidateGroupEnum.ListGroup.class}) @RequestBody $!{tableInfo.name}ReqDTO req){\n\n        List<$!{tableInfo.name}DO> result= this.$!{tool.firstLowerCase($tableInfo.name)}Service.list(BeanUtil.copyProperties(req, $!{tableInfo.name}DO.class));\n        return ResponseDTO.succeed( result.stream().map(v->$!{tableInfo.name}RspDTO.builder()\n                        //TODO 控制层进行对像转换\n                        .name(v.getName())\n                        .build())\n                .collect(Collectors.toList()));\n    }\n    @ApiOperation(value = \"新增数据\")\n    @PostMapping(\"/add\")\n    public ResponseDTO add(@Validated({ValidateGroupEnum.AddGroup.class}) @RequestBody $!{tableInfo.name}ReqDTO req){\n\n        Serializable id=this.$!{tool.firstLowerCase($tableInfo.name)}Service.add(BeanUtil.copyProperties(req, $!{tableInfo.name}DO.class));\n        return ResponseDTO.succeed(id);\n    }\n}\n"
      }, {
        "name" : "dao.vm",
        "code" : "#if($tableInfo.obj.name.startsWith(\"gj_\"))\n    $!tableInfo.setName($tool.getClassName($tableInfo.obj.name.substring(3)))\n#end\n\n\n##设置回调\n$!callback.setFileName($tool.append($tableInfo.name, \"DAO.java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/persistent/dao\"))\n##使用全局变量实现默认包导入\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}persistent.dao;\n\n\nimport com.sunny.boot.base.persistent.dao.BaseDAOImpl;\nimport com.sunny.boot.base.service.PermitsService;\nimport $!{tableInfo.savePackageName}.persistent.entity.$!{tableInfo.name}DO;\nimport $!{tableInfo.savePackageName}.persistent.mapper.$!{tableInfo.name}Mapper;\nimport org.springframework.stereotype.Component;\n\n/**\n* $!{tableInfo.comment}($!{tableInfo.name})表DAO层\n*\n* @author $!author\n* @since $!time.currTime()\n*/\n@Component\npublic class $!{tableInfo.name}DAO extends BaseDAOImpl<$!{tableInfo.name}Mapper, $!{tableInfo.name}DO> {\n\n    protected $!{tableInfo.name}DAO(PermitsService permitsService) {\n        super(permitsService);\n    }\n}\n"
      }, {
        "name" : "do.vm",
        "code" : "#if($tableInfo.obj.comment.startsWith(\"gj_\"))\n    $!tableInfo.setName($tool.getClassName($tableInfo.obj.comment.substring(3)))\n#end\n##引入宏定义\n$!{define.vm}\n\n\n\n##设置回调\n$!callback.setFileName($tool.append($tableInfo.name, \"DO.java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/persistent/entity\"))\n##使用全局变量实现默认包导入\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}persistent.entity;\n\n\nimport com.baomidou.mybatisplus.annotation.TableField;\nimport com.baomidou.mybatisplus.annotation.TableName;\nimport com.sunny.boot.base.persistent.entity.BaseDO;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport lombok.experimental.FieldNameConstants;\nimport lombok.experimental.SuperBuilder;\n/**\n* $!{tableInfo.comment}($!{tableInfo.name})表对像\n*\n* @author $!author\n* @since $!time.currTime()\n*/\n@Data\n@SuperBuilder\n@NoArgsConstructor\n@AllArgsConstructor\n@FieldNameConstants\n@TableName($!{tableInfo.name}DO.TABLE_NAME)\npublic class $!{tableInfo.name}DO extends BaseDO {\n    public final static String TABLE_NAME=\"${tableInfo.comment}\";\n\n    @TableField(value = \"name\")\n    String name;\n}\n\n\n"
      }, {
        "name" : "jpa.vm",
        "code" : "#if($tableInfo.obj.comment.startsWith(\"gj_\"))\n    $!tableInfo.setName($tool.getClassName($tableInfo.obj.comment.substring(3)))\n#end\n##引入宏定义\n$!{define.vm}\n\n\n\n##设置回调\n$!callback.setFileName($tool.append($tableInfo.name, \"JPA.java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/persistent/jpa\"))\n##使用全局变量实现默认包导入\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}persistent.jpa;\n\n\n\nimport $!{tableInfo.savePackageName}.persistent.entity.$!{tableInfo.name}DO;\nimport org.hibernate.annotations.Comment;\nimport skdapp.cn.fulltext.config.TableComment;\n\nimport javax.persistence.*;\nimport java.time.LocalDateTime;\n/**\n* $!{tableInfo.comment}($!{tableInfo.name})表JPA定义\n*\n* @author $!author\n* @since $!time.currTime()\n*/\n@Entity(name = $!{tableInfo.name}DO.TABLE_NAME)\n@TableComment(\"TODO 描述表\")\n@Table(name = $!{tableInfo.name}DO.TABLE_NAME, indexes = {\n@Index(columnList = \"delFlag\") }\n)\npublic class $!{tableInfo.name}JPA extends $!{tableInfo.name}DO {\n    @Override\n    @Id\n    @Comment(\"主键\")\n    public Long getId() {\n        return super.getId();\n    }\n\n    @Override\n    @Comment(\"姓名\")\n    public String getName() {\n        return super.getName();\n    }\n\n    @Comment(\"创建人\")\n    @Column( length = 64)\n    @Override\n    public String getCreatedBy() {\n        return super.getCreatedBy();\n    }\n\n    @Comment(\"更新人\")\n    @Override\n    @Column( length = 64)\n    public String getUpdatedBy() {\n        return super.getUpdatedBy();\n    }\n\n    @Comment(\"创建时间\")\n    @Override\n    public LocalDateTime getCreatedTime() {\n        return super.getCreatedTime();\n    }\n\n    @Comment(\"更新时间\")\n    @Override\n    public LocalDateTime getUpdatedTime() {\n        return super.getUpdatedTime();\n    }\n    @Comment(\"是否删除  Y：已删除  N：正常\")\n    @Column( columnDefinition = \" varchar(1) NOT NULL DEFAULT 'N' \" )\n    @Override\n    public String getDelFlag() {\n        return super.getDelFlag();\n    }\n}\n\n\n"
      }, {
        "name" : "junit.vm",
        "code" : "#if($tableInfo.obj.name.startsWith(\"gj_\"))    \n$!tableInfo.setName($tool.getClassName($tableInfo.obj.name.substring(3)))\n#end\n##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"ServiceImplTest\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/test\"))\n\n\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}test;\n\n\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport com.gientech.stms.demo.start.StartDemoApplication;\nimport $!{tableInfo.savePackageName}.persistent.entity.$!{tableInfo.name}DO;\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport lombok.RequiredArgsConstructor;\nimport org.junit.jupiter.api.*;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.ActiveProfiles;\n\nimport java.util.Date;\nimport java.util.List;\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})测试类\n *\n * @author $!author\n * @since $!time.currTime()\n */\n\n@SpringBootTest(classes = StartDemoApplication.class)\n@ActiveProfiles(\"test\")\n@RequiredArgsConstructor(onConstructor = @__(@Autowired))\n@Tag(\"junit_$tool.hump2Underline($tableInfo.name)\")\n@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\npublic class $tableName {\n    /**\n    * 服务对象\n    */\n    private final  $!{tableInfo.name}Service $!tool.firstLowerCase($tableInfo.name)Service;\n\n\n    private final static  String DATA_NAME = String.format(\"测试%s\", new Date().getTime());\n    private static Long id = null;\n\n    @Order(2)\n    @Test\n    void page() {\n        IPage<$!{tableInfo.name}DO> page = this.$!{tool.firstLowerCase($tableInfo.name)}Service.page($!{tableInfo.name}DO.builder().name(DATA_NAME).build(), 10, 2);\n        Assertions.assertEquals(15L, page.getTotal());\n        Assertions.assertEquals(5L, page.getRecords().size());\n    }\n\n    @Order(4)\n    @Test\n    void load() {\n         $!{tableInfo.name}DO $!{tool.firstLowerCase($tableInfo.name)}DO = this.$!{tool.firstLowerCase($tableInfo.name)}Service.load(id);\n        Assertions.assertEquals(\"测试\", $!{tool.firstLowerCase($tableInfo.name)}DO.getName());\n    }\n\n    @Order(3)\n    @Test\n    void update() {\n        this.$!{tool.firstLowerCase($tableInfo.name)}Service.update($!{tableInfo.name}DO.builder().id(id).name(\"测试\").build());\n    }\n\n    @Order(5)\n    @Test\n    void remove() {\n        this.$!{tool.firstLowerCase($tableInfo.name)}Service.remove(id);\n    }\n\n    @Order(6)\n    @Test\n    void list() {\n        List<$!{tableInfo.name}DO> list = this.$!{tool.firstLowerCase($tableInfo.name)}Service.list($!{tableInfo.name}DO.builder().name(DATA_NAME).build());\n        Assertions.assertEquals(14L, list.size());\n    }\n    @RepeatedTest(15)\n    @Order(1)\n    void add() {\n        id = (Long) this.$!{tool.firstLowerCase($tableInfo.name)}Service.add($!{tableInfo.name}DO.builder().name(DATA_NAME).build());\n        Assertions.assertNotNull(id);\n    }\n}\n"
      }, {
        "name" : "mapper.vm",
        "code" : "#if($tableInfo.obj.name.startsWith(\"gj_\"))\n    $!tableInfo.setName($tool.getClassName($tableInfo.obj.name.substring(3)))\n#end\n\n/**\n* $!{tableInfo.comment}($!{tableInfo.name})表Mapper定义\n*\n* @author $!author\n* @since $!time.currTime()\n*/\n##设置回调\n$!callback.setFileName($tool.append($tableInfo.name, \"Mapper.java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/persistent/mapper\"))\n##使用全局变量实现默认包导入\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}persistent.mapper;\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport $!{tableInfo.savePackageName}.persistent.entity.$!{tableInfo.name}DO;\nimport org.apache.ibatis.annotations.Mapper;\n\n@Mapper\npublic interface $!{tableInfo.name}Mapper extends BaseMapper<$!{tableInfo.name}DO> {\n}\n"
      }, {
        "name" : "pagereqdto.vm",
        "code" : "#if($tableInfo.obj.name.startsWith(\"gj_\"))\n    $!tableInfo.setName($tool.getClassName($tableInfo.obj.name.substring(3)))\n#end\n##引入宏定义\n$!{define.vm}\n\n\n##定义初始变量\n#set($fileName = $tool.append( \"Page\",$tableInfo.name))\n##设置回调\n$!callback.setFileName($tool.append($fileName, \"ReqDTO.java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/controller/dto\"))\n##使用全局变量实现默认包导入\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}controller.dto;\n \nimport com.sunny.boot.base.controller.dto.PageReqDTO;\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor; \n/**\n* $!{tableInfo.comment}分页请求参数\n*\n* @author $!author\n* @since $!time.currTime()\n*/ \n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@ApiModel(\"$!{tableInfo.comment}分页请求参数\")\npublic class Page$!{tableInfo.name}ReqDTO extends PageReqDTO {\n    /**\n    * 查询条件\n    */\n    @ApiModelProperty(\"查询条件\")\n    $!{tableInfo.name}ReqDTO queryParam;\n\n\n\n}\n"
      }, {
        "name" : "reqdto.vm",
        "code" : "#if($tableInfo.obj.name.startsWith(\"gj_\"))\n    $!tableInfo.setName($tool.getClassName($tableInfo.obj.name.substring(3)))\n#end\n##引入宏定义\n$!{define.vm}\n\n\n\n##设置回调\n$!callback.setFileName($tool.append($tableInfo.name, \"ReqDTO.java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/controller/dto\"))\n##使用全局变量实现默认包导入\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}controller.dto;\nimport com.sunny.boot.base.enums.ValidateGroupEnum;\nimport javax.validation.constraints.Min;\nimport javax.validation.constraints.NotEmpty;\nimport javax.validation.constraints.NotNull;\nimport io.swagger.annotations.ApiModel;\nimport java.io.Serializable;\nimport java.time.LocalDateTime;\nimport java.time.LocalDate;\nimport java.util.Date;\nimport io.swagger.annotations.ApiModelProperty;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport lombok.experimental.SuperBuilder;\nimport com.sunny.boot.base.enums.LogicDeleteEnum;\n\n/**\n* $!{tableInfo.comment}($!{tableInfo.name})表对像请求参数\n*\n* @author $!author\n* @since $!time.currTime()\n*/\n@SuperBuilder\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@ApiModel(\"$!{tableInfo.comment}对像请求参数\")\npublic class $!{tableInfo.name}ReqDTO  implements Serializable {\nprivate static final long serialVersionUID = $!tool.serial();\n#foreach($column in $tableInfo.fullColumn)\n    #if(${column.comment})/**\n    * ${column.comment}\n    */#end\n\n    @ApiModelProperty(\"${column.comment}\")\n    #if(${column.name}==\"delFlag\")\n    private LogicDeleteEnum  $!{column.name};\n    #elseif(${column.name}==\"id\")\n    @NotNull(groups =ValidateGroupEnum.UpdateGroup.class)\n    @Min(value = 1,groups =ValidateGroupEnum.UpdateGroup.class)\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n    #else\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n    #end\n#end\n\n\n\n}\n"
      }, {
        "name" : "rsqdto.vm",
        "code" : "#if($tableInfo.obj.name.startsWith(\"gj_\"))\n    $!tableInfo.setName($tool.getClassName($tableInfo.obj.name.substring(3)))\n#end\n##引入宏定义\n$!{define.vm}\n\n\n\n##设置回调\n$!callback.setFileName($tool.append($tableInfo.name, \"RspDTO.java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/controller/dto\"))\n##使用全局变量实现默认包导入\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}controller.dto;\nimport lombok.Builder;\nimport lombok.Data;\nimport io.swagger.annotations.ApiModel;\nimport java.io.Serializable;\nimport java.time.LocalDateTime;\nimport java.time.LocalDate;\nimport java.util.Date;\nimport io.swagger.annotations.ApiModelProperty;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport lombok.experimental.SuperBuilder;\nimport com.sunny.boot.base.enums.LogicDeleteEnum;\n/**\n* $!{tableInfo.comment}($!{tableInfo.name})表对像返回参数\n*\n* @author $!author\n* @since $!time.currTime()\n*/\n@SuperBuilder\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@ApiModel(\"$!{tableInfo.comment}分页请求参数\")\npublic class $!{tableInfo.name}RspDTO  implements Serializable {\n    private static final long serialVersionUID = $!tool.serial();\n#foreach($column in $tableInfo.fullColumn)\n    #if(${column.comment})/**\n    * ${column.comment}\n    */#end\n\n    @ApiModelProperty(\"${column.comment}\")\n    #if(${column.name}==\"delFlag\")\n    private LogicDeleteEnum  $!{column.name};\n    #else\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n    #end\n#end\n\n\n\n}\n"
      }, {
        "name" : "service.vm",
        "code" : "#if($tableInfo.obj.name.startsWith(\"gj_\"))    \n$!tableInfo.setName($tool.getClassName($tableInfo.obj.name.substring(3)))\n#end\n##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Service\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/service\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service;\n\nimport $!{tableInfo.savePackageName}.persistent.entity.$!{tableInfo.name}DO; \n\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport java.io.Serializable;\nimport java.util.List;\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表服务接口\n *\n * @author $!author\n * @since $!time.currTime()\n */\n\npublic interface $!{tableName} {\n /**\n     * 分页查询\n     *\n     * @param param 筛选条件\n     * @param pageSize      分页大小\n     * @param pageNum      起始页\n     * @return 查询结果\n     */\n    IPage<$!{tableInfo.name}DO> page($!{tableInfo.name}DO param, Integer pageSize, Integer pageNum);\n    /**\n     * 通过ID查询单条数据\n     *\n     * @param $!pk.name 主键\n     * @return 实例对象\n     */\n    $!{tableInfo.name}DO load($!pk.shortType  $!pk.name);\n\n    /**\n     * 修改数据\n     *\n     * @param param 实例对象\n     * @return 实例对象\n     */\n    void update($!{tableInfo.name}DO param);\n     /**\n     * 通过主键删除数据\n     *\n     * @param $!pk.name 主键\n     * @return 是否成功\n     */\n    void remove($!pk.shortType $!pk.name);\n     /**\n     * 根据条件查询数据\n     *\n     * @param param 查询条件\n     * @return 是否成功\n     */\n    List<$!{tableInfo.name}DO> list($!{tableInfo.name}DO param);\n    /**\n     * 新增数据\n     *\n     * @param param 实例对象\n     * @return 实例对象\n     */\n     Serializable add($!{tableInfo.name}DO param);\n}\n\n "
      }, {
        "name" : "serviceimpl.vm",
        "code" : "#if($tableInfo.obj.name.startsWith(\"gj_\"))\n$!tableInfo.setName($tool.getClassName($tableInfo.obj.name.substring(3)))\n#end\n##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Service\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \"Impl.java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/service/impl\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service.impl;\nimport org.apache.commons.lang3.StringUtils;\nimport $!{tableInfo.savePackageName}.persistent.entity.$!{tableInfo.name}DO;\nimport $!{tableInfo.savePackageName}.persistent.dao.$!{tableInfo.name}DAO;\nimport $!{tableInfo.savePackageName}.service.$!{tableName};\nimport $!{tableInfo.savePackageName}.exception.$!{tableInfo.name}CodeExceptionEnum;\nimport com.sunny.boot.base.exception.code.DbCodeBusinessExceptionEnum;\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport java.io.Serializable;\nimport org.springframework.validation.annotation.Validated;\nimport java.util.List;\nimport com.sunny.boot.base.exception.BusinessException;\nimport java.util.Optional;\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表服务实现\n *\n * @author $!author\n * @since $!time.currTime()\n */\n\n@Validated\n@Service\n@Transactional\n@RequiredArgsConstructor(onConstructor = @__(@Autowired))\npublic class $!{tableName}Impl implements $!{tableName} {\n\n    private final $!{tableInfo.name}DAO $!tool.firstLowerCase($tableInfo.name)DAO;\n /**\n     * 分页查询\n     *\n     * @param param 筛选条件\n     * @param pageSize      分页大小\n     * @param pageNum      起始页\n     * @return 查询结果\n     */\n    @Override\n    public IPage<$!{tableInfo.name}DO> page($!{tableInfo.name}DO param, Integer pageSize, Integer pageNum){\n        return this.$!{tool.firstLowerCase($tableInfo.name)}DAO.page(param, pageSize, pageNum, (queryParam, wrapper) -> {\n            //TODO 完成分页查询逻辑\n            wrapper.like(StringUtils.isNotBlank(queryParam.getName()),$!{tableInfo.name}DO::getName,queryParam.getName());\n        });\n    }\n    /**\n     * 通过ID查询单条数据\n     *\n     * @param $!pk.name 主键\n     * @return 实例对象\n     */\n    @Override\n    public $!{tableInfo.name}DO load($!pk.shortType  $!pk.name){\n        return this.$!{tool.firstLowerCase($tableInfo.name)}DAO.load(id);\n    }\n\n    /**\n     * 修改数据\n     *\n     * @param param 实例对象\n     * @return 实例对象\n     */\n    @Override\n    public void update($!{tableInfo.name}DO param){\n        $!{tableInfo.name}DO $!{tool.firstLowerCase($tableInfo.name)}DO= this.$!{tool.firstLowerCase($tableInfo.name)}DAO.update(param.getId(), param, (queryParam, dbData) -> {\n            //TODO 将页面的值赋值到数据库对像中\n            dbData.setName(queryParam.getName());\n        });\n        if(!Optional.ofNullable($!{tool.firstLowerCase($tableInfo.name)}DO).isPresent()){\n            throw new BusinessException(DbCodeBusinessExceptionEnum.更新失败);\n        }\n    }\n     /**\n     * 通过主键删除数据\n     *\n     * @param $!pk.name 主键\n     * @return 是否成功\n     */\n    @Override\n    public void remove($!pk.shortType $!pk.name) {\n        Boolean flag= this.$!{tool.firstLowerCase($tableInfo.name)}DAO.remove(id);\n        if(!Optional.ofNullable(flag).isPresent()){\n            throw new BusinessException(DbCodeBusinessExceptionEnum.删除失败);\n        }\n    }\n     /**\n     * 根据条件查询数据\n     *\n     * @param param 查询条件\n     * @return 是否成功\n     */\n    @Override\n    public List<$!{tableInfo.name}DO> list($!{tableInfo.name}DO param) {\n        return this.$!{tool.firstLowerCase($tableInfo.name)}DAO.list(param, (queryParam, wrapper) -> {\n            //TODO 完成分页查询逻辑\n            wrapper.like(StringUtils.isNotBlank(queryParam.getName()),$!{tableInfo.name}DO::getName,queryParam.getName());\n        });\n\n    }\n    /**\n     * 新增数据\n     *\n     * @param param 实例对象\n     * @return 实例对象\n     */\n    @Override\n    public Serializable add($!{tableInfo.name}DO param) {\n        Serializable id= this.$!{tool.firstLowerCase($tableInfo.name)}DAO.add(param.getId(), param, (queryParam,dbData) -> {\n            //TODO 根据前端传的值构造数据库对像\n            if(StringUtils.isNotBlank(queryParam.getName())){\n                dbData.setName(queryParam.getName());\n            }\n        });\n        if(!Optional.ofNullable(id).isPresent()){\n            throw new BusinessException(DbCodeBusinessExceptionEnum.新增失败);\n        }\n        return id;\n   }\n}\n\n"
      }, {
        "name" : "validate.vm",
        "code" : "#if($tableInfo.obj.name.startsWith(\"gj_\"))\n    $!tableInfo.setName($tool.getClassName($tableInfo.obj.name.substring(3)))\n#end\n\n##引入宏定义\n$!{define.vm}\n\n\n\n##设置回调\n$!callback.setFileName($tool.append($tableInfo.name, \"Check.java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/validate\"))\n##使用全局变量实现默认包导入\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}validate;\n\n\nimport $!{tableInfo.savePackageName}.persistent.entity.$!{tableInfo.name}DO;\n\nimport javax.validation.Constraint;\nimport javax.validation.ConstraintValidator;\nimport javax.validation.ConstraintValidatorContext;\nimport javax.validation.Payload;\nimport java.lang.annotation.*;\n\n/**\n* $!{tableInfo.comment}($!{tableInfo.name})校验逻辑\n*\n* @author $!author\n* @since $!time.currTime()\n*/\n@Target({ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Constraint(validatedBy = $!{tableInfo.name}Check.$!{tableInfo.name}Validator.class)\npublic @interface $!{tableInfo.name}Check {\n    /**\n    * 是否允许为空\n    */\n    boolean required() default true;\n\n    /**\n    * 校验不通过返回的提示信息\n    */\n    String message() default \"不是一个手机号码格式\";\n\n    /**\n    * Constraint要求的属性，用于分组校验和扩展，留空就好\n    */\n    Class<?>[] groups() default {};\n\n    Class<? extends Payload>[] payload() default {};\n\n    //注解校验器\n    class $!{tableInfo.name}Validator implements ConstraintValidator<$!{tableInfo.name}Check, $!{tableInfo.name}DO> {\n        private boolean required = false;\n        /**\n        * 在验证开始前调用注解里的方法，从而获取到一些注解里的参数\n        *\n        * @param constraintAnnotation annotation instance for a given constraint declaration\n        */\n        @Override\n        public void initialize($!{tableInfo.name}Check constraintAnnotation) {\n            this.required = constraintAnnotation.required();\n        }\n        /**\n        * 判断参数是否合法\n        *\n        * @param value   object to validate\n        * @param context context in which the constraint is evaluated\n        */\n        @Override\n        public boolean isValid($!{tableInfo.name}DO value, ConstraintValidatorContext context) {\n            if (this.required) {\n                return false;\n            }\n            return true;\n        }\n\n    }\n}\n\n\n\n"
      } ]
    }
  },
  "columnConfig" : {
    "Default" : {
      "name" : "Default",
      "elementList" : [ {
        "title" : "disable",
        "type" : "BOOLEAN",
        "selectValue" : ""
      }, {
        "title" : "support",
        "type" : "SELECT",
        "selectValue" : "add,edit,query,del,ui"
      }, {
        "title" : "demo",
        "type" : "TEXT"
      } ]
    }
  },
  "globalConfig" : {
    "Default" : {
      "name" : "Default",
      "elementList" : [ {
        "name" : "autoImport.vm",
        "value" : "##自动导入包（仅导入实体属性需要的包，通常用于实体类）\n#foreach($import in $importList)\nimport $!import;\n#end"
      }, {
        "name" : "define.vm",
        "value" : "##（Velocity宏定义）\n\n##定义设置表名后缀的宏定义，调用方式：#setTableSuffix(\"Test\")\n#macro(setTableSuffix $suffix)\n    #set($tableName = $!tool.append($tableInfo.name, $suffix))\n#end\n\n##定义设置包名后缀的宏定义，调用方式：#setPackageSuffix(\"Test\")\n#macro(setPackageSuffix $suffix)\n#if($suffix!=\"\")package #end#if($tableInfo.savePackageName!=\"\")$!{tableInfo.savePackageName}.#{end}$!suffix;\n#end\n\n##定义直接保存路径与文件名简化的宏定义，调用方式：#save(\"/entity\", \".java\")\n#macro(save $path $fileName)\n    $!callback.setSavePath($tool.append($tableInfo.savePath, $path))\n    $!callback.setFileName($tool.append($tableInfo.name, $fileName))\n#end\n\n##定义表注释的宏定义，调用方式：#tableComment(\"注释信息\")\n#macro(tableComment $desc)\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})$desc\n *\n * @author $!author\n * @since $!time.currTime()\n */\n#end\n\n##定义GET，SET方法的宏定义，调用方式：#getSetMethod($column)\n#macro(getSetMethod $column)\n\n    public $!{tool.getClsNameByFullName($column.type)} get$!{tool.firstUpperCase($column.name)}() {\n        return $!{column.name};\n    }\n\n    public void set$!{tool.firstUpperCase($column.name)}($!{tool.getClsNameByFullName($column.type)} $!{column.name}) {\n        this.$!{column.name} = $!{column.name};\n    }\n#end"
      }, {
        "name" : "init.vm",
        "value" : "##初始化区域\n\n##去掉表的t_前缀\n$!tableInfo.setName($tool.getClassName($tableInfo.obj.name.replaceFirst(\"book_\",\"\")))\n\n##参考阿里巴巴开发手册，POJO 类中布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误\n#foreach($column in $tableInfo.fullColumn)\n#if($column.name.startsWith(\"is\") && $column.type.equals(\"java.lang.Boolean\"))\n    $!column.setName($tool.firstLowerCase($column.name.substring(2)))\n#end\n#end\n\n##实现动态排除列\n#set($temp = $tool.newHashSet(\"testCreateTime\", \"otherColumn\"))\n#foreach($item in $temp)\n    #set($newList = $tool.newArrayList())\n    #foreach($column in $tableInfo.fullColumn)\n        #if($column.name!=$item)\n            ##带有反回值的方法调用时使用$tool.call来消除返回值\n            $tool.call($newList.add($column))\n        #end\n    #end\n    ##重新保存\n    $tableInfo.setFullColumn($newList)\n#end\n\n##对importList进行篡改\n#set($temp = $tool.newHashSet())\n#foreach($column in $tableInfo.fullColumn)\n    #if(!$column.type.startsWith(\"java.lang.\"))\n        ##带有反回值的方法调用时使用$tool.call来消除返回值\n        $tool.call($temp.add($column.type))\n    #end\n#end\n##覆盖\n#set($importList = $temp)"
      }, {
        "name" : "mybatisSupport.vm",
        "value" : "##针对Mybatis 进行支持，主要用于生成xml文件\n#foreach($column in $tableInfo.fullColumn)\n    ##储存列类型\n    $tool.call($column.ext.put(\"sqlType\", $tool.getField($column.obj.dataType, \"typeName\")))\n    #if($tool.newHashSet(\"java.lang.String\").contains($column.type))\n        #set($jdbcType=\"VARCHAR\")\n    #elseif($tool.newHashSet(\"java.lang.Boolean\", \"boolean\").contains($column.type))\n        #set($jdbcType=\"BOOLEAN\")\n    #elseif($tool.newHashSet(\"java.lang.Byte\", \"byte\").contains($column.type))\n        #set($jdbcType=\"BYTE\")\n    #elseif($tool.newHashSet(\"java.lang.Integer\", \"int\", \"java.lang.Short\", \"short\").contains($column.type))\n        #set($jdbcType=\"INTEGER\")\n    #elseif($tool.newHashSet(\"java.lang.Long\", \"long\").contains($column.type))\n        #set($jdbcType=\"INTEGER\")\n    #elseif($tool.newHashSet(\"java.lang.Float\", \"float\", \"java.lang.Double\", \"double\").contains($column.type))\n        #set($jdbcType=\"NUMERIC\")\n    #elseif($tool.newHashSet(\"java.util.Date\", \"java.sql.Timestamp\", \"java.time.Instant\", \"java.time.LocalDateTime\", \"java.time.OffsetDateTime\", \"\tjava.time.ZonedDateTime\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #elseif($tool.newHashSet(\"java.sql.Date\", \"java.time.LocalDate\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #else\n        ##其他类型\n        #set($jdbcType=\"VARCHAR\")\n    #end\n    $tool.call($column.ext.put(\"jdbcType\", $jdbcType))\n#end\n\n##定义宏，查询所有列\n#macro(allSqlColumn)#foreach($column in $tableInfo.fullColumn)$column.obj.name#if($velocityHasNext), #end#end#end\n"
      } ]
    }
  }
}